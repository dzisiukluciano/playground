package main

import (
	"fmt"
)

// O(n^2) because is n+(n-1)+(n-2)+...+1 = Sum(1 to n) of n = n*(n+1)/2 =~ (1/2)(n*n) =~ n^2
func sum(n int, res *int) {
	if n == 1 {
		*res++
		return
	}
	for i := 0; i < n; i++ {
		*res++
	}
	sum(n-1, res)

}

// calls to this function are more than O(n!) - is almost O(n * n!): n! + n!/2 + (n!/2)/3 + ... + 1
func exponential(n int, res *int, calls *int) {
	*calls++
	if n == 1 {
		// end of the three (leaves), there will be n! of them
		*res++
		return
	}
	for i := 0; i < n; i++ {
		//*res++
		exponential(n-1, res, calls)
	}

}

func main() {
	n := 10
	result := 0
	sum(n, &result)
	fmt.Println(result)

	n2 := 4
	result2 := 0
	calls := 0
	exponential(n2, &result2, &calls)
	fmt.Println(result2, "-", calls)
}
